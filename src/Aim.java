/* Generated By:JavaCC: Do not edit this line. Aim.java */
package trollAim;
import java.io.*;

public class Aim implements AimConstants {

    // declare constants

    public static final int No = 0;
    public static final int Yes = 1;

    public static final int Max_Array_Size = 10000;

    public static final int Left_Side = 100;
    public static final int Right_Side = 101;

    public static final int G_Matrix = 0;
    public static final int H_Matrix = 1;

    public static final int Endogenous = 0;
    public static final int Exogenous = 1;

    public static final int Data = 0;
    public static final int Notd = 1;
    public static final int Dtrm = 2;
    public static final int Innov = 3;

    public static final int Stoch = 0;
    public static final int Imposed = 1;

    public static final int Wrong_Node_Type = 0;
    public static final int Invalid_Node_Type = 1;
    public static final int Cannot_Allocate_Memory = 2;

  static java.util.Stack argStack = new java.util.Stack();
  static Model m;

  public static void main(String args[]) throws ParseException {

  Aim parser = new Aim(System.in);
  int status = 0;
  status = parser.runParser(args);

// code to test reentrance
//  String newargs[] = new String[1];  
//  newargs[0] = new String("antulio");
//  status = parser.runParser(newargs);

  System.exit(status);
}
  public static int notMain(String args[]) throws ParseException {

  Aim parser = new Aim(System.in);
  int status = 0;
  status = parser.runParser(args);

// code to test reentrance
//  String newargs[] = new String[1];  
//  newargs[0] = new String("antulio");
//  status = parser.runParser(newargs);

  return(status);
}

  public static int runParser(String args[]) throws ParseException {

    int ErrorCount;
    int i;
    String PathName;
    String FileName;
    int FileIndex;
    int lastSlashIndex;
    boolean verbose = false;

    if ((args.length == 1) ||
        ((args.length == 2) && (args[0].equals((String) "-v")))) {
        if (args.length == 2) {
          verbose = true;
          FileIndex = 1;
          }
        else
          FileIndex = 0;
        System.err.println("Aim Java Parser Version 0.93: Reading from file " +
                           args[FileIndex] + "...");
        try {
          PathName = args[FileIndex];
          lastSlashIndex = PathName.lastIndexOf('/');   // Real OS's
          if (lastSlashIndex < 0)
            lastSlashIndex = PathName.lastIndexOf('\\'); // Windows
          if (lastSlashIndex < 0)
            FileName = PathName;
          else
            FileName = PathName.substring(lastSlashIndex+1);
          m = new Model(FileName);
//          parser = new Aim(new java.io.FileInputStream(PathName));
          ReInit(new java.io.FileInputStream(PathName));
        } catch (java.io.FileNotFoundException e) {
          System.err.println("Aim Java Parser Version 0.93: File " +
                             args[FileIndex] + " not found.");
          System.err.print(e.getMessage());
          return(1);
        }
    }
    else {
      System.err.println("Aim Java Parser 0.93 usage is:");
      System.err.println("         java Aim [ -v ] inputfile");
      System.err.println("   -v yields verbose output.");
      return(2);
    }

    try {
//      parser.model(
        model();
      System.err.println("Aim Java Parser Version 0.93: No syntactic errors found.");
    } catch (ParseException e) {
      System.err.println("Aim Java Parser Version 0.93: Syntactic errors found.");
      System.err.print(e.getMessage());
      return(3);
    }

    // DEBUG
    //   System.err.println("\n\nModel before expanding subtrees:");
    //   m.Print();

    m.ExpandSubtrees();

    // DEBUG
    // System.err.println("\n\nModel after expanding subtrees:");
    // m.Print();

    ErrorCount = m.ErrorCheck();

    if (ErrorCount == 0)
      System.err.println("No semantic errors found.");
    else {
      System.err.print(ErrorCount + " semantic error");
      if (ErrorCount > 1)
        System.err.print("s");
      System.err.println(" found.");
      return(4);
    }

    m.BuildExogenousEquations();

    // DEBUG
    //     System.err.println("\n\nModel after building exogenous equations:");
    //     m.Print();

    if (verbose == true)
       m.PrintVerboseOutput();
       else
       m.PrintTerseOutput();

    m.PrintFunctions();

    return(0);
  }

  static final public void model() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case USEMOD:
      modelhead();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    varandcoefflists();
    eqnlist();
    modeltail();
  }

//void modelhead() :
//{  }
//{ 
//    <USEMOD> <IDENTIFIER> { m = new Model(token.image); } <SEMICOLON>
//}
  static final public void modelhead() throws ParseException {
 String s;
    jj_consume_token(USEMOD);
    jj_consume_token(IDENTIFIER);
                            s =token.image;
    jj_consume_token(SEMICOLON);
  }

  static final public void modeltail() throws ParseException {
    jj_consume_token(FILEMOD);
    jj_consume_token(SEMICOLON);
  }

  static final public void varandcoefflists() throws ParseException {
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        endogenouslist();
      } else if (jj_2_2(2)) {
        exogenouslist();
      } else if (jj_2_3(2)) {
        coefficientlist();
      } else if (jj_2_4(2)) {
        eqtypelist();
      } else if (jj_2_5(2)) {
        datatypelist();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDSYM:
      case CHANGESYM:
      case COMMENT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
  }

  static final public void endogenouslist() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADDSYM:
      jj_consume_token(ADDSYM);
      break;
    case CHANGESYM:
      jj_consume_token(CHANGESYM);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(ENDOGENOUS);
    label_2:
    while (true) {
      jj_consume_token(IDENTIFIER);
         Variable v = new Variable(token.image);
         v.setType(Endogenous);
         v.setDataType(Data);   // default for endogenous variables
         m.AddVariable(v);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void exogenouslist() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADDSYM:
      jj_consume_token(ADDSYM);
      break;
    case CHANGESYM:
      jj_consume_token(CHANGESYM);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(EXOGENOUS);
    label_3:
    while (true) {
      jj_consume_token(IDENTIFIER);
         Variable v = new Variable(token.image);
         v.setType(Exogenous);
         v.setDataType(Dtrm);   // default for exogenous variables
         m.AddVariable(v);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void coefficientlist() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADDSYM:
      jj_consume_token(ADDSYM);
      break;
    case CHANGESYM:
      jj_consume_token(CHANGESYM);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COEFFICIENT);
    label_4:
    while (true) {
      jj_consume_token(IDENTIFIER);
         m.AddCoefficient(token.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void eqtypelist() throws ParseException {
  String name;
  Token x;
    jj_consume_token(COMMENT);
    jj_consume_token(EQTYPE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPOSED:
      x = jj_consume_token(IMPOSED);
      break;
    case STOCH:
      x = jj_consume_token(STOCH);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_5:
    while (true) {
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMENT);
      }
      jj_consume_token(IDENTIFIER);
         int index;
         int eqtype;
         name = token.image;
         if (x.kind == IMPOSED)
            eqtype = Imposed;
         else
            eqtype = Stoch;

         m.AddEquation(new Equation(name, eqtype));
      if (jj_2_6(2)) {
        ;
      } else {
        break label_5;
      }
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMENT);
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void datatypelist() throws ParseException {
  Token x;
    jj_consume_token(COMMENT);
    jj_consume_token(DATATYPE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATA:
      x = jj_consume_token(DATA);
      break;
    case NOTD:
      x = jj_consume_token(NOTD);
      break;
    case DTRM:
      x = jj_consume_token(DTRM);
      break;
    case INNOV:
      x = jj_consume_token(INNOV);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_8:
    while (true) {
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMENT);
      }
      jj_consume_token(IDENTIFIER);
         int index = m.FindVariableIndex(token.image);
         switch (x.kind) {
         case DATA:
            if (index < 0) { // this should only come up if bad model file
              Variable v = new Variable(token.image);
              v.setType(Exogenous); // ????????????
              v.setDataType(Data);
              m.AddVariable(v);
              }
            else {
              m.Variables[index].setDataType(Data);
              }
            break;
         case NOTD:
            if (index < 0) { // this should only come up if bad model file
              Variable v = new Variable(token.image);
              v.setType(Exogenous); // ????????????
              v.setDataType(Notd);
              m.AddVariable(v);
              }
            else {
              m.Variables[index].setDataType(Notd);
              }
            break;
         case DTRM:
            if (index < 0) {
              Variable v = new Variable(token.image);
              v.setType(Exogenous);
              v.setDataType(Dtrm);
              m.AddVariable(v);
              }
            else {
              m.Variables[index].setDataType(Dtrm);
            }
            break;
         case INNOV:
            if (index < 0) {
              Variable v = new Variable(token.image);
              v.setType(Exogenous);
              v.setDataType(Innov);
              m.AddVariable(v);
              }
            else {
              m.Variables[index].setDataType(Innov);
            }
            break;
            }
      if (jj_2_7(2)) {
        ;
      } else {
        break label_8;
      }
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMENT);
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void eqnlist() throws ParseException {
  String name;
  Node n1;
  Node n2;
  Equation eq;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADDEQ:
      jj_consume_token(ADDEQ);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TOP:
        jj_consume_token(TOP);
        break;
      case BOTTOM:
        jj_consume_token(BOTTOM);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    label_11:
    while (true) {
      jj_consume_token(IDENTIFIER);
                     name = token.image;
      jj_consume_token(COLON);
      expression();
      jj_consume_token(EQUALS);
      expression();
      jj_consume_token(COMMA);
            int index = m.FindEquationIndex(name);
            n1 = ((Node) argStack.pop());
            n2 = ((Node) argStack.pop());
            if (index < 0) // no eqtype was found for this equation
                {
                  eq = new Equation(name, n2, n1, Stoch); // "Stoch" is default
                  m.AddEquation(eq);
                }
            else  // this equation appeared in an eqtype line
                {
                  m.Equations[index].setLHS(n2);
                  m.Equations[index].setRHS(n1);
                }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_11;
      }
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void expression() throws ParseException {
  Token x;
    term();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        x = jj_consume_token(PLUS);
        break;
      case MINUS:
        x = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      term();
            Node n1 = ((Node) argStack.pop());
            Node n2 = ((Node) argStack.pop());
            if ( x.kind == PLUS )
                argStack.push(new SumNode(n2, n1));
            else {
                ConstantNode cn1 = new ConstantNode(-1.0);
                ProductNode pn1 = new ProductNode(cn1, n1);
                argStack.push(new SumNode(n2, pn1));
                }
    }
  }

  static final public void term() throws ParseException {
  Token x;
    factor();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        x = jj_consume_token(MULTIPLY);
        break;
      case DIVIDE:
        x = jj_consume_token(DIVIDE);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      factor();
            Node n1 = ((Node) argStack.pop());
            Node n2 = ((Node) argStack.pop());
            if ( x.kind == MULTIPLY )
               argStack.push(new ProductNode(n2, n1));
            else
                {
                ConstantNode cn1 = new ConstantNode(-1.0);
                PowerNode pown1 = new PowerNode(n1, cn1);
                argStack.push(new ProductNode(n2, pown1));
                }
    }
  }

  static final public void factor() throws ParseException {
    unary();
    label_14:
    while (true) {
      if (jj_2_8(2147483647)) {
        ;
      } else {
        break label_14;
      }
      jj_consume_token(EXP);
      factor();
            Node n1 = ((Node) argStack.pop());
            Node n2 = ((Node) argStack.pop());
            argStack.push(new PowerNode(n2, n1));
    }
  }

  static final public void unary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      element();
            Node n1 = ((Node) argStack.pop());
            ConstantNode cn1 = new ConstantNode(-1.0);
            argStack.push(new ProductNode(cn1, n1));
      break;
    case FLOAT:
    case INTEGER:
    case IDENTIFIER:
    case OPENPAREN:
      element();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void element() throws ParseException {
  Double d;
  String VarName;
  int Lead;
  int Lag;
  int ELag;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENPAREN:
      jj_consume_token(OPENPAREN);
      expression();
      jj_consume_token(CLOSEPAREN);
      break;
    case FLOAT:
    case INTEGER:
      constant();
      break;
    default:
      jj_la1[23] = jj_gen;
      if (jj_2_9(4)) {
        jj_consume_token(IDENTIFIER);
                                VarName = token.image;
        jj_consume_token(OPENPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        jj_consume_token(INTEGER);
                 Lead = (int) Integer.parseInt(token.image);
        jj_consume_token(CLOSEPAREN);
          /* variable with a lead */
        ELag = No;
        argStack.push(new VariableNode(VarName, Lead, ELag));

        if (m.FindVariableIndex(VarName) == -1)
          {
            Variable v = new Variable(VarName);
            v.setType(Exogenous); // since it wasn't listed in endog list
            v.setDataType(Dtrm); // "Dtrm" is default for exogenous variables
            m.AddVariable(v);
          }

        if (Lead > m.NLead)
          m.setNLead(Lead);
      } else if (jj_2_10(2)) {
        jj_consume_token(IDENTIFIER);
                                VarName = token.image;
        jj_consume_token(OPENPAREN);
        jj_consume_token(MINUS);
        jj_consume_token(INTEGER);
                         Lag = (int) Integer.parseInt(token.image);
        jj_consume_token(CLOSEPAREN);
          /* variable with a lag */
        ELag = No;
        argStack.push(new VariableNode(VarName, -1 * Lag, ELag));

        if (m.FindVariableIndex(VarName) == -1)
          {
            Variable v = new Variable(VarName);
            v.setType(Exogenous); // since it wasn't listed in endog list
            v.setDataType(Dtrm);  // "Dtrm" is default for exogenous variables
            m.AddVariable(v);
          }

        if (Lag > m.NLag)
          m.setNLag(Lag);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          // all coefficients must be declared, so an identifier with no leads
          // or lags that has not been declared is assumed to be a variable

        if (m.FindCoefficientIndex(token.image) == -1) /* var w/no lags or leads */
        {
                if (m.FindVariableIndex(token.image) == -1)
                  {
                      Variable v = new Variable(token.image);
                      v.setType(Exogenous); // since it wasn't listed in endog list
                      v.setDataType(Dtrm); // "Dtrm" is default for exog variables
                      m.AddVariable(v);
          }
        argStack.push(new VariableNode(token.image, 0, No));
        }
        else /* coefficient */
               {
                argStack.push(new CoefficientNode(token.image));
               }
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void constant() throws ParseException {
  Token x;
  Double d;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        d = Double.valueOf(token.image);
        try {
            argStack.push(new ConstantNode(d.doubleValue()));
            } catch (NumberFormatException ee) {
        argStack.push(new ConstantNode(Double.NaN));
        }
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static final private boolean jj_3_9() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OPENPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) jj_scanpos = xsp;
    if (jj_scan_token(INTEGER)) return true;
    if (jj_scan_token(CLOSEPAREN)) return true;
    return false;
  }

  static final private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    if (jj_scan_token(ENDOGENOUS)) return true;
    return false;
  }

  static final private boolean jj_3_10() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OPENPAREN)) return true;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_3R_19()) return true;
    return false;
  }

  static final private boolean jj_3_6() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(42)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_3R_18()) return true;
    return false;
  }

  static final private boolean jj_3_8() {
    if (jj_scan_token(EXP)) return true;
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_3R_16()) return true;
    return false;
  }

  static final private boolean jj_3R_18() {
    if (jj_scan_token(COMMENT)) return true;
    if (jj_scan_token(EQTYPE)) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    return false;
  }

  static final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    if (jj_scan_token(EXOGENOUS)) return true;
    return false;
  }

  static final private boolean jj_3R_19() {
    if (jj_scan_token(COMMENT)) return true;
    if (jj_scan_token(DATATYPE)) return true;
    return false;
  }

  static final private boolean jj_3_7() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(42)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    if (jj_scan_token(COEFFICIENT)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public AimTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x800000,0x180,0x180,0x0,0x180,0x0,0x180,0x0,0x240000,0x0,0x0,0x182800,0x0,0x0,0x400200,0x40,0x0,0x3000000,0x3000000,0xc000000,0xc000000,0xa2000000,0x1000000,0xa0000000,0x0,0xa0000000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x400,0x0,0x2,0x0,0x2,0x0,0x2,0x0,0x400,0x400,0x0,0x400,0x400,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x102,0x0,0x100,0x2,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[10];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public Aim(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AimTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Aim(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AimTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Aim(AimTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(AimTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[43];
    for (int i = 0; i < 43; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
